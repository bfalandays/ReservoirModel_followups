using DifferentialEquations
using Plots
gr()

# Define the lif function for each neuron
function lif(u,p,t)
    gL, EL, C, Vth, I, v_neighbor = p
    (-gL*(u-EL)+I + w*v_neighbor)/C
end

function thr(u,t,integrator)
    integrator.u > integrator.p[4]
end

function reset!(integrator)
    integrator.u = integrator.p[2]
end

# threshold callback
threshold = DiscreteCallback(thr,reset!)

# input current callback
current_step= PresetTimeCallback([2,15],integrator -> integrator.p[5] += 210.0)
cb = CallbackSet(current_step,threshold)

# Define an array to store the initial conditions and parameters for each neuron
neurons = [(-75, [10.0, -75.0, 5.0, -55.0, 0, -80]), (-80, [5.0, -80.0, 8.0, -60.0, 0, -75]), (-85, [15.0, -85.0, 3.0, -65.0, 0, -80])]

problems = []
tspan = (0.0, 40.0)
for (u0, p) in neurons
    problems = push!(problems, ODEProblem(lif, u0, tspan, p, callback=cb))
end

#solving the ODE problem
sol = solve(problems,Tsit5())

# Plotting the solution
for i in 1:3
    plot(sol[i],vars=(0,1))
end
